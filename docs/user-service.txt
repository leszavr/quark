
### **"–°–æ–∑–¥–∞–π –∏ –Ω–∞—Å—Ç—Ä–æ–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å user-service –Ω–∞ FastAPI (Python) –¥–ª—è Quark"**

```text
–¢—ã ‚Äî senior Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å `user-service` –Ω–∞ **FastAPI** –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ Quark.

–¶–µ–ª—å: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø—É–±–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.

–†–∞–±–æ—Ç–∞–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: `/var/www/quark/services/user-service`

---

### üìÅ –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

1. –ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥:
   ```bash
   cd /var/www/quark/services
   mkdir user-service && cd user-service
   ```

2. –°–æ–∑–¥–∞–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
   ```bash
   python3.11 -m venv venv
   source venv/bin/activate
   ```

3. –£—Å—Ç–∞–Ω–æ–≤–∏ FastAPI –∏ Uvicorn:
   ```bash
   pip install "fastapi[all]" uvicorn python-multipart
   ```

---

### üóÇÔ∏è –®–∞–≥ 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

–°–æ–∑–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

```
user-service/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ routers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profiles.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ settings.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subscriptions.py
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user_profile.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subscription.py
‚îÇ   ‚îú‚îÄ‚îÄ schemas/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ settings.py
‚îÇ   ‚îú‚îÄ‚îÄ database.py
‚îÇ   ‚îú‚îÄ‚îÄ dependencies.py
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îÇ       ‚îî‚îÄ‚îÄ avatar_processor.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ test_profiles.py
‚îÇ   ‚îî‚îÄ‚îÄ test_subscriptions.py
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ .env.example
‚îî‚îÄ‚îÄ README.md
```

---

### üìÑ –®–∞–≥ 3: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

#### 1. `main.py`
- –°–æ–∑–¥–∞–π FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
- –î–æ–±–∞–≤—å CORS
- –ü–æ–¥–∫–ª—é—á–∏ –º–∞—Ä—à—Ä—É—Ç—ã: `/profiles`, `/settings`, `/subscriptions`
- –í–∫–ª—é—á–∏ Swagger (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)

#### 2. `database.py`
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ `SQLAlchemy` (async)
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ `async_engine` –∏ `AsyncSession`
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
  - `DATABASE_URL=postgresql+asyncpg://quark:quarkpass@postgres:5432/quark_dev`

#### 3. `models/user_profile.py`
–°–æ–∑–¥–∞–π –º–æ–¥–µ–ª—å:
- `user_id: UUID` (FK ‚Üí auth-service, –Ω–æ —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ UUID)
- `bio: TEXT`
- `website: VARCHAR(255)`
- `location: VARCHAR(100)`
- `birth_date: DATE`
- `avatar_url: TEXT`
- `cover_image_url: TEXT`
- `privacy_level: ENUM('public', 'friends', 'private')`
- `theme: JSONB` (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã)
- `created_at`, `updated_at`

#### 4. `schemas/profile.py`
Pydantic-—Å—Ö–µ–º—ã:
- `ProfileCreate`
- `ProfileUpdate`
- `ProfileResponse` (–≤–∫–ª—é—á–∞—è `username`, `display_name` –∏–∑ `auth-service`)

#### 5. `routers/profiles.py`
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- `GET /profiles/{username}` ‚Üí –ø—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/profiles/alex`)
- `GET /profiles/me` ‚Üí —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç JWT)
- `PUT /profiles/me` ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
- `GET /profiles/{username}/blogs` ‚Üí —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è `username` –∏–∑ JWT ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π `dependencies.get_current_user()` (–≤—ã–∑—ã–≤–∞–µ—Ç `auth-service` —á–µ—Ä–µ–∑ API –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç JWT)

#### 6. `routers/subscriptions.py`
- `POST /subscriptions/{target_user_id}` ‚Üí –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
- `DELETE /subscriptions/{target_user_id}` ‚Üí –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
- `GET /subscriptions/following` ‚Üí –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω
- `GET /subscriptions/followers` ‚Üí –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –º–µ–Ω—è

#### 7. `utils/avatar_processor.py`
- –§—É–Ω–∫—Ü–∏—è `process_avatar(image: UploadFile) -> str`
- –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–æ 200x200
- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WebP
- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å (–∏–ª–∏ URL –∫ `media-service`)

---

### üîê –®–∞–≥ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å auth-service

–°–æ–∑–¥–∞–π `dependencies.py`:

```python
async def get_current_user(token: str = Header(...), user_service=Depends(get_user_service)):
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç)
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
        return payload
    except:
        raise HTTPException(status_code=401, detail="Invalid token")

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –í—ã–∑–æ–≤ auth-service: GET /auth/validate
    # response = requests.get("http://auth-service:3001/auth/validate", headers={"Authorization": token})
    # if response.status_code != 200:
    #     raise HTTPException(status_code=401, detail="Unauthorized")
    # return response.json()
```

---

### üê≥ –®–∞–≥ 5: Dockerfile

–°–æ–∑–¥–∞–π `Dockerfile`:

```Dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "3002"]
```

–°–æ–∑–¥–∞–π `requirements.txt`:
```txt
fastapi[all]
uvicorn
sqlalchemy[asyncio]
asyncpg
python-jose[cryptography]
python-multipart
pillow
requests
jinja2
```

---

### üß™ –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

1. –ó–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å:
   ```bash
   uvicorn src.main:app --reload --host 0.0.0.0 --port 3002
   ```

2. –ü–µ—Ä–µ–π–¥–∏ –≤ Swagger: `http://localhost:3002/docs`
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π:
   - `GET /profiles/me` ‚Üí 401 (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
   - –° `Authorization: Bearer <valid-jwt>` ‚Üí 200
   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
   - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

---

### üîÑ –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose.yml

–î–æ–±–∞–≤—å –≤ `/var/www/quark/docker-compose.yml`:

```yaml
  user-service:
    build: ./services/user-service
    ports:
      - "3002:3002"
    environment:
      - DATABASE_URL=postgresql+asyncpg://quark:quarkpass@postgres:5432/quark_dev
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - auth-service
    restart: unless-stopped
```

---

### ‚úÖ –®–∞–≥ 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

–°–æ–∑–¥–∞–π `README.md`:

```markdown
# User Service

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏, –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

## –§—É–Ω–∫—Ü–∏–∏
- –ü—É–±–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
- –ü–æ–¥–ø–∏—Å–∫–∏ (following/followers)
- –ê–≤–∞—Ç–∞—Ä—ã, –±–∏–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å auth-service (JWT)

## API
Swagger: `/docs`

## –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- PostgreSQL
- auth-service (JWT)
- media-service (–∞–≤–∞—Ç–∞—Ä—ã)
```

---

### üìÑ –í—ã–≤–æ–¥

–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:
1. –í—ã–≤–µ–¥–∏ –æ—Ç—á–µ—Ç: —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏.
2. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ `media-service` –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å `blog-service`.

–¢—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.  
–ì–æ—Ç–æ–≤? –ü—Ä–∏—Å—Ç—É–ø–∞–π.
```

---
