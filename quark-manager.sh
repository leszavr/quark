#!/bin/bash

# Quark –ú–ö–° Service Manager v1.0
# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Quark
# –ê–≤—Ç–æ—Ä: Quark Development Team
# –î–∞—Ç–∞: 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/quark-manager.log"
COMPOSE_FILE="$SCRIPT_DIR/docker-compose.yml"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOG_DIR"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
print_log() {
    local color="$1"
    local level="$2"
    shift 2
    local message="$*"
    echo -e "${color}$message${NC}"
    log "$level" "$message"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ú–ö–°
declare -A SERVICES=(
    # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    ["postgres"]="PostgreSQL Database (port 5432)"
    ["redis"]="Redis Cache & State Store (port 6379)"
    ["nats"]="NATS JetStream Event Bus (port 4222)"
    ["vault"]="HashiCorp Vault Secrets Manager (port 8200)"
    ["traefik"]="Traefik API Gateway (ports 80/443/8080)"
    ["minio"]="MinIO Object Storage (ports 9000/9001)"
    
    # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã (–ø–æ—Ä—Ç—ã 3000-3020)
    ["plugin-hub"]="Plugin Hub - –ú–ö–° Command Module (port 3000)"
    ["auth-service"]="Auth Service - JWT Authentication (port 3001)"
    ["monitoring"]="Monitoring Dashboard (port 3900)"
    ["quark-ui"]="Quark Platform UI - Admin Console (port 3100)"
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
    # ["user"]="User Service (port 3002)"
    # ["media"]="Media Service (port 3003)"
    # ["blog"]="Blog Service (port 3004)"
    # ["messaging"]="Messaging Service (port 3005)"
)

# –ü–æ—Ä—è–¥–æ–∫ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
STARTUP_ORDER=(
    "postgres"
    "redis" 
    "nats"
    "vault"
    "traefik"
    "minio"
    "plugin-hub"
    "auth-service"
    "monitoring"
    "quark-ui"
)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
show_logo() {
    print_log "$CYAN" "INFO" ""
    print_log "$CYAN" "INFO" "üöÄ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    print_log "$CYAN" "INFO" "   ‚ñë‚ñí‚ñì‚ñà QUARK –ú–ö–° SERVICE MANAGER ‚ñà‚ñì‚ñí‚ñë"
    print_log "$CYAN" "INFO" "   –ú–æ–¥—É–ª—å–Ω–∞—è –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –°—Ç–∞–Ω—Ü–∏—è - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏"
    print_log "$CYAN" "INFO" "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    print_log "$CYAN" "INFO" ""
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo ""
    echo -e "${WHITE}–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:${NC}"
    echo "    ./quark-manager.sh [–ö–û–ú–ê–ù–î–ê] [–û–ü–¶–ò–ò] [–°–ï–†–í–ò–°–´...]"
    echo ""
    echo -e "${WHITE}–ö–û–ú–ê–ù–î–´:${NC}"
    echo -e "    ${GREEN}start${NC}       –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)"
    echo -e "    ${GREEN}stop${NC}        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "    ${GREEN}restart${NC}     –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "    ${GREEN}build${NC}       –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "    ${GREEN}rebuild${NC}     –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo -e "    ${GREEN}status${NC}      –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "    ${GREEN}health${NC}      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health –≤—Å–µ—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "    ${GREEN}logs${NC}        –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "    ${GREEN}clean${NC}       –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã"
    echo -e "    ${GREEN}menu${NC}        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
    echo -e "    ${GREEN}list${NC}        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo ""
    echo -e "${WHITE}UI –ö–û–ú–ê–ù–î–´:${NC}"
    echo -e "    ${PURPLE}ui:dev${NC}      –ó–∞–ø—É—Å—Ç–∏—Ç—å UI –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo -e "    ${PURPLE}ui:build${NC}    –°–æ–±—Ä–∞—Ç—å UI –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
    echo -e "    ${PURPLE}ui:start${NC}    –ó–∞–ø—É—Å—Ç–∏—Ç—å UI —á–µ—Ä–µ–∑ Docker"
    echo -e "    ${PURPLE}ui:open${NC}     –û—Ç–∫—Ä—ã—Ç—å UI –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    echo ""
    echo -e "${WHITE}–û–ü–¶–ò–ò:${NC}"
    echo -e "    ${YELLOW}-f, --force${NC}     –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
    echo -e "    ${YELLOW}-q, --quiet${NC}     –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º"
    echo -e "    ${YELLOW}-v, --verbose${NC}   –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    echo -e "    ${YELLOW}-h, --help${NC}      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${WHITE}–ü–†–ò–ú–ï–†–´:${NC}"
    echo -e "    ${CYAN}./quark-manager.sh start${NC}                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "    ${CYAN}./quark-manager.sh start plugin-hub redis${NC}   # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ"
    echo -e "    ${CYAN}./quark-manager.sh restart monitoring${NC}       # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo -e "    ${CYAN}./quark-manager.sh rebuild plugin-hub${NC}       # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Plugin Hub"
    echo -e "    ${CYAN}./quark-manager.sh status${NC}                   # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "    ${CYAN}./quark-manager.sh health${NC}                   # Health check API —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "    ${CYAN}./quark-manager.sh logs plugin-hub${NC}          # –õ–æ–≥–∏ Plugin Hub"
    echo -e "    ${CYAN}./quark-manager.sh ui:dev${NC}                   # –ó–∞–ø—É—Å—Ç–∏—Ç—å UI –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo -e "    ${CYAN}./quark-manager.sh ui:open${NC}                  # –û—Ç–∫—Ä—ã—Ç—å UI –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    echo ""
    echo -e "${WHITE}–î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ò–°–´:${NC}"

    for service in "${STARTUP_ORDER[@]}"; do
        if [[ -n "${SERVICES[$service]}" ]]; then
            printf "    ${GREEN}%-12s${NC} %s\n" "$service" "${SERVICES[$service]}"
        fi
    done
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∏ Docker Compose
check_requirements() {
    if ! command -v docker &> /dev/null; then
        print_log "$RED" "ERROR" "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        print_log "$RED" "ERROR" "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi

    if [[ ! -f "$COMPOSE_FILE" ]]; then
        print_log "$RED" "ERROR" "‚ùå –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω: $COMPOSE_FILE"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
validate_service() {
    local service="$1"
    if [[ -z "${SERVICES[$service]}" ]]; then
        print_log "$RED" "ERROR" "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service"
        print_log "$YELLOW" "INFO" "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${!SERVICES[*]}"
        return 1
    fi
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
get_service_status() {
    local service="$1"
    local container_name
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    case $service in
        "auth-service")
            container_name="quark-auth"
            ;;
        "plugin-hub")
            container_name="quark-plugin-hub"
            ;;
        "quark-ui")
            container_name="quark-ui"
            ;;
        *)
            container_name="quark-$service"
            ;;
    esac
    
    if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "^$container_name"; then
        echo "running"
    elif docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep -q "^$container_name"; then
        echo "stopped"
    else
        echo "not_created"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    print_log "$BLUE" "INFO" "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –ú–ö–° Quark:"
    print_log "$BLUE" "INFO" "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    for service in "${STARTUP_ORDER[@]}"; do
        local status=$(get_service_status "$service")
        local description="${SERVICES[$service]}"
        
        case $status in
            "running")
                print_log "$GREEN" "INFO" "‚úÖ $service - –†–ê–ë–û–¢–ê–ï–¢ ($description)"
                ;;
            "stopped")
                print_log "$YELLOW" "WARN" "‚è∏Ô∏è  $service - –û–°–¢–ê–ù–û–í–õ–ï–ù ($description)"
                ;;
            "not_created")
                print_log "$RED" "ERROR" "‚ùå $service - –ù–ï –°–û–ó–î–ê–ù ($description)"
                ;;
        esac
    done
    
    echo ""
    docker-compose ps
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    local services=("$@")
    
    if [[ ${#services[@]} -eq 0 ]]; then
        services=("${STARTUP_ORDER[@]}")
        print_log "$GREEN" "INFO" "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ú–ö–° –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ..."
    else
        print_log "$GREEN" "INFO" "üöÄ –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${services[*]}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–≤
    for service in "${services[@]}"; do
        validate_service "$service" || exit 1
    done
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å —á–µ—Ä–µ–∑ docker-compose –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if ! docker network ls | grep -q "quark_quark-network"; then
        print_log "$BLUE" "INFO" "üåê –°–æ–∑–¥–∞–Ω–∏–µ Docker-—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ docker-compose..."
        docker-compose up --no-start
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    for service in "${services[@]}"; do
        print_log "$BLUE" "INFO" "üì¶ –ó–∞–ø—É—Å–∫ $service (${SERVICES[$service]})..."
        docker-compose up -d "$service"
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        case $service in
            "postgres"|"redis"|"vault")
                print_log "$YELLOW" "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ $service (5 —Å–µ–∫)..."
                sleep 5
                ;;
        esac
    done
    
    print_log "$GREEN" "SUCCESS" "‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    local services=("$@")
    
    if [[ ${#services[@]} -eq 0 ]]; then
        print_log "$YELLOW" "INFO" "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose down
    else
        print_log "$YELLOW" "INFO" "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services[*]}"
        for service in "${services[@]}"; do
            validate_service "$service" || exit 1
            print_log "$YELLOW" "INFO" "üì¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ $service..."
            docker-compose stop "$service"
        done
    fi
    
    print_log "$YELLOW" "SUCCESS" "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤
rebuild_services() {
    local services=("$@")
    
    if [[ ${#services[@]} -eq 0 ]]; then
        services=("plugin-hub" "auth-service" "monitoring")  # –¢–æ–ª—å–∫–æ –Ω–∞—à–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
        print_log "$PURPLE" "INFO" "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
    else
        print_log "$PURPLE" "INFO" "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services[*]}"
    fi
    
    for service in "${services[@]}"; do
        validate_service "$service" || exit 1
        print_log "$PURPLE" "INFO" "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ $service..."
        docker-compose build --no-cache "$service"
    done
    
    print_log "$PURPLE" "SUCCESS" "‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§—É–Ω–∫—Ü–∏—è health check API —Å–µ—Ä–≤–∏—Å–æ–≤
health_check() {
    print_log "$CYAN" "INFO" "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health API —Å–µ—Ä–≤–∏—Å–æ–≤..."
    print_log "$CYAN" "INFO" "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # Plugin Hub health check
    if command -v curl &> /dev/null; then
        if curl -s http://localhost:3000/health &> /dev/null; then
            print_log "$GREEN" "SUCCESS" "‚úÖ Plugin Hub - API –¥–æ—Å—Ç—É–ø–µ–Ω (port 3000)"
        else
            print_log "$RED" "ERROR" "‚ùå Plugin Hub - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (port 3000)"
        fi
        
        if curl -s http://localhost:3001/auth/health &> /dev/null; then
            print_log "$GREEN" "SUCCESS" "‚úÖ Auth Service - API –¥–æ—Å—Ç—É–ø–µ–Ω (port 3001)"
        else
            print_log "$RED" "ERROR" "‚ùå Auth Service - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (port 3001)"
        fi
        
        if curl -s http://localhost:3900 &> /dev/null; then
            print_log "$GREEN" "SUCCESS" "‚úÖ Monitoring Dashboard - –¥–æ—Å—Ç—É–ø–µ–Ω (port 3900)"
        else
            print_log "$RED" "ERROR" "‚ùå Monitoring Dashboard - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (port 3900)"
        fi
        
        if curl -s http://localhost:3100/health &> /dev/null; then
            print_log "$GREEN" "SUCCESS" "‚úÖ Quark Platform UI - –¥–æ—Å—Ç—É–ø–µ–Ω (port 3100)"
        else
            print_log "$RED" "ERROR" "‚ùå Quark Platform UI - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (port 3100)"
        fi
    else
        print_log "$YELLOW" "WARN" "‚ö†Ô∏è  curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API –ø—Ä–æ–≤–µ—Ä–∫–∏"
    fi
}

# UI —Ñ—É–Ω–∫—Ü–∏–∏
ui_dev() {
    print_log "$PURPLE" "UI" "üé® –ó–∞–ø—É—Å–∫ Quark Platform UI –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    
    if [ ! -d "$SCRIPT_DIR/infra/quark-ui" ]; then
        print_log "$RED" "ERROR" "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è quark-ui –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    cd "$SCRIPT_DIR/infra/quark-ui"
    
    if [ ! -f "package.json" ]; then
        print_log "$RED" "ERROR" "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ quark-ui"
        return 1
    fi
    
    if [ ! -d "node_modules" ]; then
        print_log "$YELLOW" "WARN" "‚ö†Ô∏è  node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        npm install
    fi
    
    print_log "$GREEN" "SUCCESS" "üöÄ –ó–∞–ø—É—Å–∫ dev —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:3100"
    npm run dev
}

ui_build() {
    print_log "$PURPLE" "UI" "üî® –°–±–æ—Ä–∫–∞ Quark Platform UI –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
    
    if [ ! -d "$SCRIPT_DIR/infra/quark-ui" ]; then
        print_log "$RED" "ERROR" "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è quark-ui –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    cd "$SCRIPT_DIR/infra/quark-ui"
    
    if [ ! -d "node_modules" ]; then
        print_log "$YELLOW" "WARN" "‚ö†Ô∏è  node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        npm install
    fi
    
    print_log "$GREEN" "SUCCESS" "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist/"
    npm run build
}

ui_start() {
    print_log "$PURPLE" "UI" "üê≥ –ó–∞–ø—É—Å–∫ Quark Platform UI —á–µ—Ä–µ–∑ Docker..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if docker ps -q -f name=quark-ui > /dev/null 2>&1; then
        print_log "$YELLOW" "WARN" "‚ö†Ô∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä quark-ui"
        docker stop quark-ui > /dev/null 2>&1
        docker rm quark-ui > /dev/null 2>&1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ docker-compose
    docker-compose up -d quark-ui
    
    print_log "$GREEN" "SUCCESS" "‚úÖ UI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3100"
}

ui_open() {
    print_log "$PURPLE" "UI" "üåê –û—Ç–∫—Ä—ã—Ç–∏–µ Quark Platform UI –≤ –±—Ä–∞—É–∑–µ—Ä–µ..."
    
    local url="http://localhost:3100"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å UI
    if command -v curl &> /dev/null; then
        if ! curl -s "$url" > /dev/null 2>&1; then
            print_log "$YELLOW" "WARN" "‚ö†Ô∏è  UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞..."
            ui_start
            sleep 3
        fi
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    if command -v xdg-open &> /dev/null; then
        xdg-open "$url"
    elif command -v open &> /dev/null; then
        open "$url"
    elif command -v start &> /dev/null; then
        start "$url"
    else
        print_log "$YELLOW" "WARN" "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"
        print_log "$CYAN" "INFO" "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: $url"
    fi
    
    print_log "$GREEN" "SUCCESS" "‚úÖ UI –æ—Ç–∫—Ä—ã—Ç –ø–æ –∞–¥—Ä–µ—Å—É: $url"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    show_logo
    check_requirements
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    local command=""
    local force=false
    local quiet=false
    local verbose=false
    local services=()
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            start|stop|restart|build|rebuild|status|health|logs|clean|menu|list|ui:dev|ui:build|ui:start|ui:open)
                command="$1"
                shift
                ;;
            -f|--force)
                force=true
                shift
                ;;
            -q|--quiet)
                quiet=true
                shift
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                services+=("$1")
                shift
                ;;
        esac
    done
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    if [[ -z "$command" ]]; then
        show_help
        exit 0
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    case $command in
        start)
            start_services "${services[@]}"
            show_status
            ;;
        stop)
            stop_services "${services[@]}"
            ;;
        restart)
            stop_services "${services[@]}"
            sleep 2
            start_services "${services[@]}"
            show_status
            ;;
        build)
            rebuild_services "${services[@]}"
            ;;
        rebuild)
            rebuild_services "${services[@]}"
            start_services "${services[@]}"
            show_status
            ;;
        status)
            show_status
            ;;
        health)
            health_check
            ;;
        logs)
            if [[ ${#services[@]} -eq 0 ]]; then
                docker-compose logs
            else
                docker-compose logs "${services[@]}"
            fi
            ;;
        clean)
            print_log "$RED" "WARN" "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
            docker-compose down --rmi all --volumes --remove-orphans
            docker system prune -f
            print_log "$RED" "SUCCESS" "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            ;;
        list)
            echo ""
            echo -e "${WHITE}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ú–ö–° Quark:${NC}"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            for service in "${STARTUP_ORDER[@]}"; do
                printf "  ${GREEN}%-12s${NC} %s\n" "$service" "${SERVICES[$service]}"
            done
            echo ""
            ;;
        menu)
            print_log "$BLUE" "INFO" "üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏..."
            ;;
        ui:dev)
            ui_dev
            ;;
        ui:build)
            ui_build
            ;;
        ui:start)
            ui_start
            ;;
        ui:open)
            ui_open
            ;;
        *)
            print_log "$RED" "ERROR" "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
